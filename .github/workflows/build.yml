name: Build

on:
  [push]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    env:
      BUILD_VERSION: SNAPSHOT
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: bintray-jcenter
          server-username: BINTRAY_USERNAME
          server-password: BINTRAY_API_KEY
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Ensure to use tagged version
        run: mvn versions:set --file ./pom.xml -DnewVersion=${GITHUB_REF##*/}
        if: startsWith(github.ref, 'refs/tags/')
      - name: Export the project version to the job environment and fix it as an ouput of this job
        if: runner.os != 'Windows' #On Windows PowerShell this step would fail, therefore we just skip it there
        id: setversion
        run: |
          v=$(mvn help:evaluate "-Dexpression=project.version" -q -DforceStdout)
          echo "::set-env name=BUILD_VERSION::${v}"
      - name: Build and Test
        run: mvn -B install
      - name: Upload snapshot artifact cloud-access-${{ env.BUILD_VERSION }}.jar build on Linux
        if: runner.os == 'Linux' # The build artifacts are the same on all os, therefore we upload from the "cheapest" runner
        uses: actions/upload-artifact@v2
        with:
          name: cloud-access-${{ env.BUILD_VERSION }}.jar
          path: target/cloud-access-*.jar
  deploy:
    name: Deploys to jcenter
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Ensure to use tagged version
        run: mvn versions:set --file ./pom.xml -DnewVersion=${GITHUB_REF##*/}
      - name: Build and deploy to jcenter
        run: mvn -B deploy -DskipTests
        env:
          BINTRAY_USERNAME: cryptobot
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
